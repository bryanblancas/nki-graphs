define(["ojs/ojcontext","knockout","ojs/ojarraydataprovider","./equivalences/scalesEquivalences","./utils/utils","ojs/ojknockout","ojs/ojinputtext","ojs/ojinputnumber","ojs/ojselectsingle","oj-c/buttonset-single","oj-c/button","oj-c/popup","ojs/ojchart","ojs/ojcolorspectrum"],(function(e,t,a,i,o){function s(e){this._initializeVars(),this._initializeDP(),this._initializeListeners()}return s.prototype._initializeVars=function(e){this.graphCategories=t.observableArray([o.getGraphCatModel()]),this.chartData=t.observableArray([]),this.maxY=t.observable(100),this.stepY=t.observable(10),this.legendPosition=t.observable("bottom"),this.chartType=t.observable("polar"),this.opened=t.observable(!1),this.curIdx=t.observable(),this.curCategoryName=t.observable(),this.curColorSelected=t.observable(),this.labelPosition=t.observable("auto"),this.chartOrientation=t.observable("vertical")},s.prototype._initializeDP=function(e){this.scalesDp=new a(i.SCALES_LOV,{keyAttributes:"value"}),this.chartTypeOptions=[{label:"Bar",value:"cartesian"},{label:"Polar",value:"polar"}],this.labelPositionOptions=[{label:"Ver",value:"auto"},{label:"Ocultar",value:"none"}],this.orientationOptions=[{label:"Vertical",value:"vertical"},{label:"Horizontal",value:"horizontal"}],this.legendPositionDp=new a([{value:"start",label:"Izquierda"},{value:"end",label:"Derecha"},{value:"bottom",label:"Abajo"},{value:"top",label:"Arriba"}],{keyAttributes:"value"}),this.dataProvider=new a(this.graphCategories,{keyAttributes:"name"}),this.chartDataDp=new a(this.chartData,{keyAttributes:"id"})},s.prototype._initializeListeners=function(e){this.handleCatValueChanged=(e,t,a)=>{const o=t.data.value(),s=t.data.scale();o&&s?t.data.peScale(i.transformScaleToPercentile(o,s)):t.data.peScale("n/a")},this.handleAddCategory=()=>{this.graphCategories.push(o.getGraphCatModel())},this.handleRemoveCategory=(e,t,a)=>{this.graphCategories.remove(t.data)},this.handleGraph=()=>{const e=this.graphCategories().map(((e,t)=>o.getDataItemForChart(e,t)));this.chartData(e)},this.handleChangeChartType=e=>{this.chartType(e)},this.openListener=(e,t,a)=>{const i=t.index;this.curIdx(i),this.curCategoryName(this.graphCategories()[i].name()),this.opened(!0)},this.cancelListener=()=>{this.opened(!1)},this.applyColor=()=>{const e=this.curIdx(),t=this.curColorSelected();this.graphCategories()[e].color(t.toString()),this.cancelListener()}},e.getPageContext().getBusyContext().applicationBootstrapComplete(),new s}));